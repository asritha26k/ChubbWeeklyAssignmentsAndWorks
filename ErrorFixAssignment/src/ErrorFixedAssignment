// Fixed version using OOP principles
abstract class Shape {           // Fixed: used abstraction
    abstract double area();
}

class Circle extends Shape {
    private double radius;       // Fixed: encapsulated field

    public Circle(double radius) {
        this.radius = radius;
    }

    @Override
    double area() {              // Fixed: polymorphism instead of if-else
        return Math.PI * radius * radius;
    }
}

class Rectangle extends Shape {
    private double length, breadth;

    public Rectangle(double length, double breadth) {
        this.length = length;
        this.breadth = breadth;
    }

    @Override
    double area() {
        return length * breadth;
    }
}

public class Main {
    public static void main(String[] args) {
        Shape s1 = new Circle(5);
        Shape s2 = new Rectangle(4, 3);

        System.out.println("Circle area: " + s1.area());
        System.out.println("Rectangle area: " + s2.area());
    }
}
